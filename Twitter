import pandas as pd
import numpy as np
import re
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Load Dataset
train_df = pd.read_csv("your_training_file.csv", encoding="utf-8", header=None)
train_df.columns = ["ID", "Topic", "Sentiment", "Tweet"]

# Remove missing values
train_df = train_df.dropna()

# Text cleaning function
def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", "", text)
    text = re.sub(r"\@\w+|\#", "", text)
    text = re.sub(r"[^\w\s]", "", text)
    text = re.sub(r"\d+", "", text)
    return text.strip()

train_df["Cleaned_Tweet"] = train_df["Tweet"].apply(clean_text)

# Encode Sentiment labels
label_encoder = LabelEncoder()
train_df["Sentiment_Encoded"] = label_encoder.fit_transform(train_df["Sentiment"])

# Split data
X_train, X_test, y_train, y_test = train_test_split(train_df["Cleaned_Tweet"], train_df["Sentiment_Encoded"], test_size=0.2, random_state=42)

# Tokenization
max_words = 5000
max_len = 100
tokenizer = Tokenizer(num_words=max_words, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)

X_train_seq = pad_sequences(tokenizer.texts_to_sequences(X_train), maxlen=max_len, padding="post")
X_test_seq = pad_sequences(tokenizer.texts_to_sequences(X_test), maxlen=max_len, padding="post")

# Build LSTM Model
model = Sequential([
    Embedding(input_dim=max_words, output_dim=128, input_length=max_len),
    LSTM(64, return_sequences=True),
    Dropout(0.3),
    LSTM(32),
    Dense(16, activation="relu"),
    Dropout(0.3),
    Dense(len(label_encoder.classes_), activation="softmax")
])

model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

# Train the Model
model.fit(X_train_seq, y_train, epochs=5, batch_size=32, validation_data=(X_test_seq, y_test))

# Evaluate the Model
loss, accuracy = model.evaluate(X_test_seq, y_test)
print("Test Accuracy:", accuracy)

# Make predictions
predictions = model.predict(X_test_seq)
predicted_labels = np.argmax(predictions, axis=1)

# Decode Labels
predicted_sentiments = label_encoder.inverse_transform(predicted_labels)
print(predicted_sentiments[:10])  # Print first 10 predictions
